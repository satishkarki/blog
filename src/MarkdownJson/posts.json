[{"id":1634270400,"title":"How to manage Debian Packages","author":"Satish Karki","date":"October 15, 2021","tags":"Linux","content":"If you spend most of your time in a shell then you will probably use commands like `wget`, `dpkg` and `apt` frequently to install different packages. Everything is in the `man` page but I sometime find it very difficult to read the manpage page to be honest. So, I have listed some of  commonly used syntax in this post.  \n\n### **wget**\n\nThe command I am using is **wget** and the URL passed to it is the repository location of **.deb** file.\n\n```bash\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n```\n\nwget command syntax\n\n```bash\nwget [options] [URL]\n```\n\n| OPTIONS                    | DESCRIPTION                                                  |\n| :------------------------- | :----------------------------------------------------------- |\n| wget -O *filename* URL     | Saving the downloaded file under a different name            |\n| wget -P *file path* URL    | Downloading a File to a Specific Directory                   |\n| wget --limit-rate=*1m* URL | Limiting the download speed , 1m means 1 megabyte, 1k means 1 kilobyte, 1g means 1 gigabyte |\n| wget -c URL                | Resuming a download                                          |\n| wget -b URL                | Downloading in Background                                    |\n| tail -f wget-log           | By default, the output is redirected to wget-log file in the current directory. To watch the status of the download, use the tail command |\n\nThese were some of the basic options with wget. We can change the Wget User-Agent, download multiple files, download via FTP, Create a mirror of a Website, skip certificate check, download to the standard output. Here is the [GNU Wget's dirty manual](https://www.gnu.org/software/wget/manual/wget.html).\n\n---\n\n### dpkg\n\nNow we have downloaded the file, we need to install the Debian package. **dpkg** is the package manger for Debian. \n\n```\ndpkg [options...] action\n```\n\n| Command                                | Function                                                     |\n| -------------------------------------- | ------------------------------------------------------------ |\n| dpkg -i *package_file.deb*             | Install package                                              |\n| sudo apt -f install                    | to fix the unmet dependency issues once a debian package is installed |\n| dpkg -I */path/to/file.deb*            | List all dependencies of a Deb file                          |\n| dpkg-deb -c */path/to/file.deb*        | List all the files that will be installed from a deb package |\n| dpkg-deb --extract */path/to/file.deb* | Extract all files from a deb package                         |\n\nLearn more about it [here](https://linuxhint.com/manual_install_deb_package_cli_ubuntu/) .\n\n---\n\n### apt\n\nWe can use apt to install the Debian package as well\n\n```\napt \n```\n\nMost of the apt command must be run as a user with sudo privileges. apt-get and apt-cache are backward compatible between the different versions and have more options and features.\n\n| Command                                            | Function                                                     |\n| -------------------------------------------------- | ------------------------------------------------------------ |\n| sudo apt list                                      | Listing packages                                             |\n| sudo apt list --installed                          | List installed packages only                                 |\n| sudo apt search package_name                       | Searching packages                                           |\n| sudo apt show package_name                         | Package Information                                          |\n| sudo apt list --upgradeable                        | List all upgrade able packages                               |\n| sudo apt update                                    | Updating package index                                       |\n| sudo apt upgrade                                   | upgrading the packages to their latest versions              |\n| sudo apt upgrade *package_name*                    | upgrade a single package                                     |\n| sudo apt full-upgrade                              | It will remove the installed packages if that is needed to upgrade the whole system |\n| sudo apt install *Package_name 1* *Package_name 2* | Installing packages                                          |\n| sudo apt install */full/path/file.deb*             | To install local deb file                                    |\n\n---\n\nLet's delete the packages now\n\n| Command                      | Function                                                     |\n| ---------------------------- | ------------------------------------------------------------ |\n| sudo apt remove package_name | Removing Package                                             |\n| sudo apt purge package_name  | It will remove package file including all configuration files |\n| sudo apt autoremove          | Remove Unused Packages                                       |\n\nLearn more about apt [here](https://linuxize.com/post/how-to-use-apt-command/[)\n\n"},{"id":1633060800,"title":"Git to Know","author":"Satish Karki","date":"October 1, 2021","tags":"Git","content":"A programmer's must have tool but its use is not confined to coding only. Imagine changing the `config` file of an application and you messed it up completely. Worry no more, you can revert to the original configuration, with one liner if you know how git works.\nGit is the most commonly used version control system. It is a distributed VCS, complete codebase including its full version history is mirrored on every developer's computer. This feature helps to synchronise code between multiple people working on the same project.\n\n\n\n![Gitworkflow](Gitworkflow.png)\n\n## Three States\n\n| State     | Feature                                                      |\n| --------- | ------------------------------------------------------------ |\n| Staged    | the files with the updated changes are marked to be committed to the local repository but not yet committed |\n| Modified  | the files with the updated changes are not yet stored in the local repository |\n| Committed | the changes you made to your file are safely stored in the local repository |\n\n## Git Commands\n\n| Command    | Function                                                     |\n| ---------- | ------------------------------------------------------------ |\n| git add    | to add a file that is in the working directory to the staging area |\n| git commit | to add all files that are staged to the local repository     |\n| git push   | to add all committed files in the local repository to the remote repository |\n| git fetch  | to get files from the remote repository to the local repository but not into the working directory |\n| git merge  | to get the files from the local repository into the working directory |\n| git pull   | to get files from the remote repository directly into the working directory. It is equivalent to a `git fetch` and a `git merge` . |\n\n## Git Installation\n\n```bash\n#Version Check\ngit --version \n\n#installing in Linux\nsudo apt install git-all\n\n#for Windows go to this link\nhttps://gitforwindows.org/\n```\n\n## Git Configuration\n\n```bash\n#Authorization\ngit config --global user.name \"YOUR_USERNAME\"\n$ git config --global user.email \"myemail@gmail.com\"\n\n#To Check the info you provided\ngit config --global --list\n```\n\n**NOTE**\n\nFrom August 13, 2021, GitHub is no longer accepting account passwords when authenticating Git operations. You need to add a **PAT (Personal Access Token)** instead, and you can follow the below method to add a PAT on your system.\n\n- Step 1: [Create a Personal Access Token](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token) \n\n- Step 2: For Linux-based OS\n\n  Once GIT is configured, we can cache the given record in your computer to remember the token\n\n  ```bash\n  # For Linux, you need to configure the local GIT client with a username and email address\n  $ git config --global user.name \"your_github_username\"\n  $ git config --global user.email \"your_github_email\"\n  $ git config -l\n  \n  #Once GIT is configured, we can begin using it to access GitHub. Example:\n  $ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY\n  > Cloning into `Spoon-Knife`...\n  $ Username for 'https://github.com' : username\n  $ Password for 'https://github.com' : give your personal access token here\n  \n  # Now cache the given record in your computer to remembers the token:\n  $ git config --global credential.helper cache\n  \n  # If needed, anytime you can delete the cache record by:\n  $ git config --global --unset credential.helper\n  $ git config --system --unset credential.helper\n  \n  #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\n  ```\n\n  For other OS follow this [article](https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to)\n\n## Using GitHub with SSH Key (optional)\n\n- Why SSH? You can connect and authenticate to remote server and services, without supplying your username and personal access token at each visit. [Learn more](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/about-ssh)\n\n- Before you generate an SSH key, you can check to see if you have any existing SSH keys. [Learn more](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)\n\n  ```bash\n  # Lists the files in your .ssh directory, if they exist\n  ls -al ~/.ssh\n  ```\n\n- Generating SSH key and adding it to the ssh-agent [Learn More](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)\n\n  ```bash\n  #Generating a new SSH Key\n  ssh-keygen -t ed25519 -C \"your_email@example.com\"\n  \n  #Starting the ssh-agent in the background\n  eval \"$(ssh-agent -s)\"\n  \n  #Adding your SSH Key to the ssh-agent\n  ssh-add ~/.ssh/id_ed25519\n  ```\n\n- Adding a new SSH Key to your GitHub account [Learn More](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)\n\n  ```bash\n  # Downloads and installs xclip. If you don't have `apt-get`, you might need to use another installer (like `yum`)\n   sudo apt-get update\n   sudo apt-get install xclip\n  \n  # Copies the contents of the id_ed25519.pub file to your clipboard\n   xclip -selection clipboard < ~/.ssh/id_ed25519.pub\n  ```\n\n- Testing your SSH connection [Learn More](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/testing-your-ssh-connection)\n\n  ```bash\n  # Attempts to ssh to GitHub\n  ssh -T git@github.com\n  ```\n\n## Let's Git\n\n- Create a Repository\n- Go to your working directory\n\n### Initialize Git\n\n```bash\n # To create a README file for the repository\n touch README.md\n \n # Initiates an empty git repository\n git init          \n```\n\n### Add files to the Staging Area for commit\n\n```bash\n# Adds all the files in the local repository and stages them for commit\ngit add . \n\n# To add a specific file\ngit add README.md \n```\n\n### Git Status\n\n```bash\n# Lists all new or modified files to be committed\ngit status\n```\n\n### Commit Changes to Local Repo\n\n```bash\n# The message in the \" \" is given so that the other users can read the message and see what changes you made\ngit commit -m \"First commit\"\n```\n\n### Remove file from staging area\n\n```bash\n# to remove all files from the staging area\n#-r is used for recursive \ngit rm --cached -r .\n```\n\n### Uncommit Changes you just made to your Git Repo\n\n```bash\n# Remove the most recent commit# Commit again!\ngit reset HEAD~1\n```\n\n- Reset can be --soft, --mixed, --hard. [Learn More](https://levelup.gitconnected.com/confused-with-the-difference-between-git-reset-soft-mixed-hard-3285e8b5cd0f)\n\n![GitReset](gitreset.png)\n\n### Add a remote origin and Push\n\n```bash\n# sets the new remote\ngit remote add origin remote_repository_URL\n\n# Use this if you have enabled SSH\ngit remote add origin git@github.com/satishkarki/Notes.git\n\n# Use this if SSH is not enabled\ngit remote add origin https://github.com/satishkarki/Notes.git\n\n# List the remote connections you have to other repositories\ngit remote -v\n\n# pushes changes to origin\ngit push -u origin main \n```\n\n**NOTE**\n\nOn Oct. 1, 2020, any new repositories you create will use main as the default branch, instead of master, It is GitHub's effort to remove unnecessary reference to slavery and replace them with more inclusive term.\n\n### Removing Remote Repository\n\n```bash\n# View current remotes\ngit remote -v\n\n> origin  https://github.com/OWNER/REPOSITORY.git (fetch)\n> origin  https://github.com/OWNER/REPOSITORY.git (push)\n> destination  https://github.com/FORKER/REPOSITORY.git (fetch)\n> destination  https://github.com/FORKER/REPOSITORY.git (push)\n\n# Remove remote\ngit remote rm destination\n\n# Verify it's gone\ngit remote -v\n\n> origin  https://github.com/OWNER/REPOSITORY.git (fetch)\n> origin  https://github.com/OWNER/REPOSITORY.git (push)\n```\n\n**Note**: `git remote rm` does not delete the remote repository from the server.  It simply removes the remote and its references from your local repository.\n\n### See the changes made to your file\n\n```bash\n# To show the files changes not yet staged\ngit diff \n```\n\n### View Commit History\n\n```bash\ngit log\ngit log --oneline --graph\n```\n\n## Basic Git Flow\n\n```bash\ngit add .\n\ngit status # Lists all new or modified files to be committed\n\ngit commit -m \"Second commit\"\n\ngit push -u origin main\n```\n\n## Cloning a Git Repo\n\n```bash\ngit clone remote_repository_URl\n```\n\n## Git Ignore\n\nWhen we push our source code in the remote repository then we can use git ignore to exclude sensitive files likes API keys, passwords and even the local setting files, which is just local to our settings. One example of unwanted file is DS_Store file. \n\n- You can get pre-built template for gitignore file from this [repository](https://github.com/github/gitignore)\n\n```bash\n# Create a .gitignore file\ntouch .gitignore\n\n# Add file to be ignored in .gitignore file\nvim .gitignore\n\n#Then list the files you want to ignore as a list, Example\n.DS_Store\nAPI/api.html\n```\n\n## Collaboration\n\n![GitWorkFlow](gitworkflow.png)\n\n### Branching and Merging\n\n![branch/merge](branchmerge.png)\n\n```bash\n# Create a branch\ngit branch blue\n\n# List the branch, * sign shows the current branch we are in\ngit branch\n\n# Let's say you are in main branch and wants to go to blue branch\ngit checkout blue\n\n# If I want to merge the blue branch again with the main \ngit merge blue\n```\n\n### Forking and Pull Request\n\n![forking](fork.png)\n\nIf you want to learn more about the Git Branching...[go to this site](https://learngitbranching.js.org/)\n\n## References:\n\n- https://www.udemy.com/course/the-complete-web-development-bootcamp/\n\n- https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/\n\n- https://www.toolsqa.com/git/difference-between-git-clone-and-git-fork/\n\n  \n"}]